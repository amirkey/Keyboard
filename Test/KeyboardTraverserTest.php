<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-15 at 11:16:26.
 */
include_once "..\\KeyboardTraverser.php";

class KeyboardTraverserTest extends PHPUnit_Framework_TestCase {

    /**
     * @var KeyboardTraverser
     */
    protected $object;

    /**
     * @var string
     */
    protected $keyboard;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new KeyboardTraverser;
        $this->keyboard = array(
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "abcdefghijklmnopqrstuvwxyz",
            "0123456789!@#$%^&*()?/|\\+-",
            "`~[]{}<>        .,;:'\"_=\r\r"
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * Get the position of specified key
     * 
     * @param string $key
     * @return array
     */
    protected function getPos($key) {
        for ($row = 0; $row < count($this->keyboard); $row++) {
            $col = strpos($this->keyboard[$row], $key);
            if ($col !== FALSE) {
                return array($row, $col);
            }
        }
        $this->assertTrue(FALSE);
    }

    /**
     * Get the key at the specified position
     * 
     * @param array $pos
     * @return string
     */
    protected function getKey($pos) {
        return substr($this->keyboard[$pos[0]], $pos[1], 1);
    }

    /**
     * @covers KeyboardTraverser::getKeySequence
     * @todo   Implement testGetKeySequence().
     */
    public function testGetKeySequence() {
        $sentence = "This is a test. We type some characters like #, &, :, / and | for TEST.";
        $sequences = $this->object->getKeySequence($sentence);
        $sentenceChars = str_split($sentence);
        for ($index = 0; $index < count($sentenceChars); $index++) {
            $cursurPos = $this->getPos($sentenceChars[$index]);
            $charSeqs = $sequences[$index];
            foreach ($charSeqs as $seq) {
                $pos = $index == 0 ? $cursurPos : $this->getPos($sentenceChars[$index - 1]);
                $seqChars = str_split($seq);
                for ($s = 0; $s < count($seqChars); $s++) {
                    if ($seqChars[$s] === "U") {
                        if ($pos[0] == 3) {
                            if ($pos[1] > 7 && $pos[1] < 16) { // Space rules
                                $pos = $this->getPos("#");
                            } elseif ($pos[1] > 23 && $pos[1] < 26) { // Backspace rule
                                $pos = $this->getPos("-");
                            }
                        } else {
                            $pos[0] = $pos[0] - 1 < 0 ? 3 : $pos[0] - 1;
                        }
                    } elseif ($seqChars[$s] === "D") {
                        if ($pos[0] == 3) {
                            if ($pos[1] > 7 && $pos[1] < 16) { // Space rules
                                $pos = $this->getPos("I");
                            } elseif ($pos[1] > 23 && $pos[1] < 26) { // Backspace rule
                                $pos = $this->getPos("Z");
                            }
                        } else {
                            $pos[0] = $pos[0] + 1 > 3 ? 0 : $pos[0] + 1;
                        }
                    } elseif ($seqChars[$s] === "L") {
                        if ($pos[0] == 3) {
                            if ($pos[1] > 7 && $pos[1] < 16) { // Space rules
                                $pos = $this->getPos(">");
                            } elseif ($pos[1] > 23 && $pos[1] < 26) { // Backspace rule
                                $pos = $this->getPos("=");
                            }
                        } else {
                            $pos[1] = $pos[1] - 1 < 0 ? 25 : $pos[1] - 1;
                        }
                    } elseif ($seqChars[$s] === "R") {
                        if ($pos[0] == 3) {
                            if ($pos[1] > 7 && $pos[1] < 16) { // Space rules
                                $pos = $this->getPos(".");
                            } elseif ($pos[1] > 23 && $pos[1] < 26) { // Backspace rule
                                $pos = $this->getPos("`");
                            }
                        } else {
                            $pos[1] = $pos[1] + 1 > 25 ? 0 : $pos[1] + 1;
                        }
                    } elseif ($seqChars[$s] === "E") {
                        $this->assertTrue($s == count($seqChars) - 1); // Check the position of 
                    } else {
                        $this->assertTrue(FALSE);
                    }
                }
            }
        }
    }

}
